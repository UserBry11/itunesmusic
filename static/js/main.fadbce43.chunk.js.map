{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["itunes_url","Music_App","state","search1","search2","search3","value","handleChange","event","setState","target","handleSongQuery","preventDefault","complete_url","fetch","then","results","json","data","Fragment","onSubmit","this","placeholder","autoFocus","onChange","type","trackName","artistName","collectionName","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAGMA,G,MAAa,6DA4FJC,E,2MAxFbC,MAAQ,CACNC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,MAAO,I,EAITC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZH,MAAOE,EAAME,OAAOJ,S,EAIxBK,gBAAkB,SAAAH,GAGhB,GAFAA,EAAMI,iBAEkB,KAArB,EAAKV,MAAMI,MACZ,EAAKG,SAAS,CACZN,QAAS,GACTC,QAAS,GACTC,QAAS,SAIR,CACH,IAAMQ,EAAeb,EAAa,EAAKE,MAAMI,MAE7CQ,MAAMD,GACLE,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CACZN,QAASe,EAAKF,QAAQ,GACtBZ,QAASc,EAAKF,QAAQ,GACtBX,QAASa,EAAKF,QAAQ,GACtBV,MAAO,U,wEAOb,OACE,kBAAC,IAAMa,SAAP,KACE,qDAEA,0BAAMC,SAAUC,KAAKV,iBACnB,2BACEW,YAAY,eACZC,WAAS,EACTjB,MAAOe,KAAKnB,MAAMI,MAClBkB,SAAUH,KAAKd,eAEjB,4BAAQkB,KAAK,UAAb,WAGF,+BACE,4BACE,6BACA,oCACA,sCACA,sCAEF,4BACE,wCACA,4BAAKJ,KAAKnB,MAAMC,QAAQuB,WACxB,4BAAKL,KAAKnB,MAAMC,QAAQwB,YACxB,4BAAKN,KAAKnB,MAAMC,QAAQyB,iBAE1B,4BACE,wCACA,4BAAKP,KAAKnB,MAAME,QAAQsB,WACxB,4BAAKL,KAAKnB,MAAME,QAAQuB,YACxB,4BAAKN,KAAKnB,MAAME,QAAQwB,iBAE1B,4BACE,wCACA,4BAAKP,KAAKnB,MAAMG,QAAQqB,WACxB,4BAAKL,KAAKnB,MAAMG,QAAQsB,YACxB,4BAAKN,KAAKnB,MAAMG,QAAQuB,uB,GAhFZC,aCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.fadbce43.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst itunes_url = \"https://itunes.apple.com/search?attributeType=music&term=\"\n\n\nclass Music_App extends Component {\n  state = {\n    search1: {},\n    search2: {},\n    search3: {},\n    value: '',\n  }\n\n  \n  handleChange = event => {\n    this.setState({\n      value: event.target.value,\n    })\n  }\n  \n  handleSongQuery = event => {\n    event.preventDefault();\n\n    if(this.state.value === '') {\n      this.setState({\n        search1: {},\n        search2: {},\n        search3: {},\n      })\n    }\n\n    else {\n      const complete_url = itunes_url + this.state.value\n  \n      fetch(complete_url)\n      .then(results => results.json())\n      .then(data => {\n        this.setState({ \n          search1: data.results[0],\n          search2: data.results[1],\n          search3: data.results[2],\n          value: '',\n        })\n      })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>iTunes Code Challenge</h1>\n\n        <form onSubmit={this.handleSongQuery}>\n          <input\n            placeholder=\"ENTER A SONG\"\n            autoFocus\n            value={this.state.value}\n            onChange={this.handleChange}\n            />\n          <button type=\"submit\">Search</button>\n        </form>\n\n        <table>\n          <tr>\n            <th></th>\n            <th>Song</th>\n            <th>Artist</th>\n            <th>Album</th>\n          </tr>\n          <tr>\n            <td>Search 1</td>\n            <td>{this.state.search1.trackName}</td>\n            <td>{this.state.search1.artistName}</td>\n            <td>{this.state.search1.collectionName}</td>\n          </tr>\n          <tr>\n            <td>Search 2</td>\n            <td>{this.state.search2.trackName}</td>\n            <td>{this.state.search2.artistName}</td>\n            <td>{this.state.search2.collectionName}</td>\n          </tr>\n          <tr>\n            <td>Search 3</td>\n            <td>{this.state.search3.trackName}</td>\n            <td>{this.state.search3.artistName}</td>\n            <td>{this.state.search3.collectionName}</td>\n          </tr>\n        </table>\n\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Music_App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}